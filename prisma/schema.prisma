generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 選手マスタ（拡張版）
model Player {
  id            Int       @id @default(autoincrement())
  registrationNo String   @unique @map("registration_no")
  name          String
  club          String?
  prefecture    String?
  birthDate     DateTime? @map("birth_date")
  estimatedBirthYear Int? @map("estimated_birth_year")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  rankings      Ranking[]
  categoryHistory PlayerCategoryHistory[]

  matchesAsPlayer1  Match[]            @relation("MatchPlayer1")
  matchesAsPlayer2  Match[]            @relation("MatchPlayer2")
  tournamentResults TournamentResult[]
  
  @@map("players")
}

// ランキング履歴（時系列対応強化）
model Ranking {
  id           Int      @id @default(autoincrement())
  playerId     Int      @map("player_id")
  categoryCode String   @map("category_code")
  gender       String   // 'male' または 'female'
  type         String   // 'singles' または 'doubles'
  ageGroup     Int      @map("age_group")
  rankPosition Int      @map("rank_position")
  totalPoints  Int      @map("total_points")
  calcPoints   Int      @map("calc_points")
  rankingDate  DateTime @map("ranking_date")
  archiveDate  DateTime? @map("archive_date")
  isLatest     Boolean  @default(false) @map("is_latest")
  scrapingLogId Int?    @map("scraping_log_id")
  createdAt    DateTime @default(now()) @map("created_at")
  isTied       Boolean  @default(false) @map("is_tied")  // 追加
  player       Player   @relation(fields: [playerId], references: [id])
  scrapingLog  ScrapingLog? @relation(fields: [scrapingLogId], references: [id])
  
  @@unique([playerId, categoryCode, rankingDate])
  @@index([playerId, rankingDate])
  @@index([categoryCode, rankingDate])
  @@index([isLatest])
  @@map("rankings")
}

// アーカイブ期間管理
model ArchivePeriod {
  id                  Int      @id @default(autoincrement())
  year                Int
  month               Int
  archiveDate         DateTime @map("archive_date")
  displayName         String   @map("display_name")
  isProcessed         Boolean  @default(false) @map("is_processed")
  totalCategories     Int      @default(0) @map("total_categories")
  processedCategories Int      @default(0) @map("processed_categories")
  createdAt           DateTime @default(now()) @map("created_at")
  
  scrapingLogs        ScrapingLog[]
  
  @@unique([year, month])
  @@map("archive_periods")
}

// スクレイピング履歴
model ScrapingLog {
  id               Int      @id @default(autoincrement())
  categoryCode     String   @map("category_code")
  gender           String
  type             String
  ageGroup         Int      @map("age_group")
  rankingDate      DateTime @map("ranking_date")
  archivePeriodId  Int?     @map("archive_period_id")
  totalRecords     Int      @map("total_records")
  success          Boolean
  errorMessage     String?  @map("error_message")
  executionTimeMs  Int?     @map("execution_time_ms")
  dataSource       String   @map("data_source") // 'latest' または 'archive'
  createdAt        DateTime @default(now()) @map("created_at")
  
  archivePeriod    ArchivePeriod? @relation(fields: [archivePeriodId], references: [id])
  rankings         Ranking[]
  
  @@map("scraping_logs")
}

// 選手カテゴリ履歴
model PlayerCategoryHistory {
  id              Int      @id @default(autoincrement())
  playerId        Int      @map("player_id")
  categoryCode    String   @map("category_code")
  gender          String
  type            String
  ageGroup        Int      @map("age_group")
  firstAppearance DateTime @map("first_appearance")
  lastAppearance  DateTime @map("last_appearance")
  totalAppearances Int     @default(1) @map("total_appearances")
  bestRank        Int?     @map("best_rank")
  bestPoints      Int?     @map("best_points")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  player          Player   @relation(fields: [playerId], references: [id])
  
  @@unique([playerId, categoryCode])
  @@map("player_category_history")
}

// 大会マスタ
model Tournament {
  id         Int                   @id @default(autoincrement())
  name       String
  year       Int
  round      Int?                  // 第何回大会
  venue      String?               // 開催地/会場
  startDate  DateTime?             @map("start_date")
  endDate    DateTime?             @map("end_date")
  createdAt  DateTime              @default(now()) @map("created_at")
  updatedAt  DateTime              @updatedAt @map("updated_at")
  
  categories TournamentCategory[]
  
  @@unique([name, year])
  @@map("tournaments")
}

// 大会カテゴリー
model TournamentCategory {
  id           Int                @id @default(autoincrement())
  tournamentId Int                @map("tournament_id")
  categoryCode String             @map("category_code")  // gs35, ld70等
  gender       String              // 'male' または 'female'
  type         String              // 'singles' または 'doubles'
  ageGroup     Int                @map("age_group")
  drawSize     Int                @map("draw_size")      // 16, 32, 64, 128等
  createdAt    DateTime           @default(now()) @map("created_at")
  
  tournament   Tournament         @relation(fields: [tournamentId], references: [id])
  matches      Match[]
  results      TournamentResult[]
  
  @@unique([tournamentId, categoryCode])
  @@index([categoryCode])
  @@map("tournament_categories")
}

// 試合結果
model Match {
  id             Int                 @id @default(autoincrement())
  categoryId     Int                 @map("category_id")
  round          String              // "1R", "2R", "QF", "SF", "F"等
  matchNumber    Int?                @map("match_number")
  player1Id      Int?                @map("player1_id")
  player1Seed    Int?                @map("player1_seed")
  player1Partner String?             @map("player1_partner")  // ダブルス用
  player2Id      Int?                @map("player2_id")
  player2Seed    Int?                @map("player2_seed")
  player2Partner String?             @map("player2_partner")  // ダブルス用
  score          String?             // "6-3 6-4", "W.O.", "RET"等
  winner         String?             // "player1" または "player2"
  matchDate      DateTime?           @map("match_date")
  createdAt      DateTime            @default(now()) @map("created_at")
  
  category       TournamentCategory  @relation(fields: [categoryId], references: [id])
  player1        Player?             @relation("MatchPlayer1", fields: [player1Id], references: [id])
  player2        Player?             @relation("MatchPlayer2", fields: [player2Id], references: [id])
  

  @@index([categoryId, round])
  @@index([player1Id])
  @@index([player2Id])
  @@map("matches")
}

// 大会最終成績
model TournamentResult {
  id            Int                @id @default(autoincrement())
  categoryId    Int                @map("category_id")
  playerId      Int                @map("player_id")
  partnerName   String?            @map("partner_name")     // ダブルス用
  finalPosition String             @map("final_position")   // "優勝", "準優勝", "ベスト4"等
  rankOrder     Int                @map("rank_order")       // 1, 2, 3, 5, 9, 17等
  pointsEarned  Int?               @map("points_earned")    // 獲得ポイント
  createdAt     DateTime           @default(now()) @map("created_at")
  
  category      TournamentCategory @relation(fields: [categoryId], references: [id])
  player        Player             @relation(fields: [playerId], references: [id])
  
  @@unique([categoryId, playerId, partnerName])
  @@index([playerId])
  @@map("tournament_results")
}